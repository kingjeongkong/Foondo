
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Restaurant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Restaurant
 * 
 */
export type RestaurantModel = runtime.Types.Result.DefaultSelection<Prisma.$RestaurantPayload>

export type AggregateRestaurant = {
  _count: RestaurantCountAggregateOutputType | null
  _avg: RestaurantAvgAggregateOutputType | null
  _sum: RestaurantSumAggregateOutputType | null
  _min: RestaurantMinAggregateOutputType | null
  _max: RestaurantMaxAggregateOutputType | null
}

export type RestaurantAvgAggregateOutputType = {
  cityId: number | null
}

export type RestaurantSumAggregateOutputType = {
  cityId: bigint | null
}

export type RestaurantMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  placeId: string | null
  cityId: bigint | null
  name: string | null
  address: string | null
  photoUrl: string | null
}

export type RestaurantMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  placeId: string | null
  cityId: bigint | null
  name: string | null
  address: string | null
  photoUrl: string | null
}

export type RestaurantCountAggregateOutputType = {
  id: number
  createdAt: number
  placeId: number
  cityId: number
  name: number
  address: number
  photoUrl: number
  _all: number
}


export type RestaurantAvgAggregateInputType = {
  cityId?: true
}

export type RestaurantSumAggregateInputType = {
  cityId?: true
}

export type RestaurantMinAggregateInputType = {
  id?: true
  createdAt?: true
  placeId?: true
  cityId?: true
  name?: true
  address?: true
  photoUrl?: true
}

export type RestaurantMaxAggregateInputType = {
  id?: true
  createdAt?: true
  placeId?: true
  cityId?: true
  name?: true
  address?: true
  photoUrl?: true
}

export type RestaurantCountAggregateInputType = {
  id?: true
  createdAt?: true
  placeId?: true
  cityId?: true
  name?: true
  address?: true
  photoUrl?: true
  _all?: true
}

export type RestaurantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Restaurant to aggregate.
   */
  where?: Prisma.RestaurantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Restaurants to fetch.
   */
  orderBy?: Prisma.RestaurantOrderByWithRelationInput | Prisma.RestaurantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RestaurantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Restaurants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Restaurants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Restaurants
  **/
  _count?: true | RestaurantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RestaurantAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RestaurantSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RestaurantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RestaurantMaxAggregateInputType
}

export type GetRestaurantAggregateType<T extends RestaurantAggregateArgs> = {
      [P in keyof T & keyof AggregateRestaurant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRestaurant[P]>
    : Prisma.GetScalarType<T[P], AggregateRestaurant[P]>
}




export type RestaurantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RestaurantWhereInput
  orderBy?: Prisma.RestaurantOrderByWithAggregationInput | Prisma.RestaurantOrderByWithAggregationInput[]
  by: Prisma.RestaurantScalarFieldEnum[] | Prisma.RestaurantScalarFieldEnum
  having?: Prisma.RestaurantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RestaurantCountAggregateInputType | true
  _avg?: RestaurantAvgAggregateInputType
  _sum?: RestaurantSumAggregateInputType
  _min?: RestaurantMinAggregateInputType
  _max?: RestaurantMaxAggregateInputType
}

export type RestaurantGroupByOutputType = {
  id: string
  createdAt: Date
  placeId: string
  cityId: bigint | null
  name: string | null
  address: string | null
  photoUrl: string | null
  _count: RestaurantCountAggregateOutputType | null
  _avg: RestaurantAvgAggregateOutputType | null
  _sum: RestaurantSumAggregateOutputType | null
  _min: RestaurantMinAggregateOutputType | null
  _max: RestaurantMaxAggregateOutputType | null
}

type GetRestaurantGroupByPayload<T extends RestaurantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RestaurantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RestaurantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RestaurantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RestaurantGroupByOutputType[P]>
      }
    >
  >



export type RestaurantWhereInput = {
  AND?: Prisma.RestaurantWhereInput | Prisma.RestaurantWhereInput[]
  OR?: Prisma.RestaurantWhereInput[]
  NOT?: Prisma.RestaurantWhereInput | Prisma.RestaurantWhereInput[]
  id?: Prisma.UuidFilter<"Restaurant"> | string
  createdAt?: Prisma.DateTimeFilter<"Restaurant"> | Date | string
  placeId?: Prisma.StringFilter<"Restaurant"> | string
  cityId?: Prisma.BigIntNullableFilter<"Restaurant"> | bigint | number | null
  name?: Prisma.StringNullableFilter<"Restaurant"> | string | null
  address?: Prisma.StringNullableFilter<"Restaurant"> | string | null
  photoUrl?: Prisma.StringNullableFilter<"Restaurant"> | string | null
  city?: Prisma.XOR<Prisma.CityNullableScalarRelationFilter, Prisma.CityWhereInput> | null
  report?: Prisma.XOR<Prisma.RestaurantReportNullableScalarRelationFilter, Prisma.RestaurantReportWhereInput> | null
}

export type RestaurantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  placeId?: Prisma.SortOrder
  cityId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  photoUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.CityOrderByWithRelationInput
  report?: Prisma.RestaurantReportOrderByWithRelationInput
}

export type RestaurantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  placeId?: string
  AND?: Prisma.RestaurantWhereInput | Prisma.RestaurantWhereInput[]
  OR?: Prisma.RestaurantWhereInput[]
  NOT?: Prisma.RestaurantWhereInput | Prisma.RestaurantWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Restaurant"> | Date | string
  cityId?: Prisma.BigIntNullableFilter<"Restaurant"> | bigint | number | null
  name?: Prisma.StringNullableFilter<"Restaurant"> | string | null
  address?: Prisma.StringNullableFilter<"Restaurant"> | string | null
  photoUrl?: Prisma.StringNullableFilter<"Restaurant"> | string | null
  city?: Prisma.XOR<Prisma.CityNullableScalarRelationFilter, Prisma.CityWhereInput> | null
  report?: Prisma.XOR<Prisma.RestaurantReportNullableScalarRelationFilter, Prisma.RestaurantReportWhereInput> | null
}, "id" | "placeId">

export type RestaurantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  placeId?: Prisma.SortOrder
  cityId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  photoUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.RestaurantCountOrderByAggregateInput
  _avg?: Prisma.RestaurantAvgOrderByAggregateInput
  _max?: Prisma.RestaurantMaxOrderByAggregateInput
  _min?: Prisma.RestaurantMinOrderByAggregateInput
  _sum?: Prisma.RestaurantSumOrderByAggregateInput
}

export type RestaurantScalarWhereWithAggregatesInput = {
  AND?: Prisma.RestaurantScalarWhereWithAggregatesInput | Prisma.RestaurantScalarWhereWithAggregatesInput[]
  OR?: Prisma.RestaurantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RestaurantScalarWhereWithAggregatesInput | Prisma.RestaurantScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Restaurant"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Restaurant"> | Date | string
  placeId?: Prisma.StringWithAggregatesFilter<"Restaurant"> | string
  cityId?: Prisma.BigIntNullableWithAggregatesFilter<"Restaurant"> | bigint | number | null
  name?: Prisma.StringNullableWithAggregatesFilter<"Restaurant"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"Restaurant"> | string | null
  photoUrl?: Prisma.StringNullableWithAggregatesFilter<"Restaurant"> | string | null
}

export type RestaurantCreateInput = {
  id?: string
  createdAt?: Date | string
  placeId: string
  name?: string | null
  address?: string | null
  photoUrl?: string | null
  city?: Prisma.CityCreateNestedOneWithoutRestaurantsInput
  report?: Prisma.RestaurantReportCreateNestedOneWithoutRestaurantInput
}

export type RestaurantUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  placeId: string
  cityId?: bigint | number | null
  name?: string | null
  address?: string | null
  photoUrl?: string | null
  report?: Prisma.RestaurantReportUncheckedCreateNestedOneWithoutRestaurantInput
}

export type RestaurantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.CityUpdateOneWithoutRestaurantsNestedInput
  report?: Prisma.RestaurantReportUpdateOneWithoutRestaurantNestedInput
}

export type RestaurantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  cityId?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  report?: Prisma.RestaurantReportUncheckedUpdateOneWithoutRestaurantNestedInput
}

export type RestaurantCreateManyInput = {
  id?: string
  createdAt?: Date | string
  placeId: string
  cityId?: bigint | number | null
  name?: string | null
  address?: string | null
  photoUrl?: string | null
}

export type RestaurantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type RestaurantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  cityId?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type RestaurantListRelationFilter = {
  every?: Prisma.RestaurantWhereInput
  some?: Prisma.RestaurantWhereInput
  none?: Prisma.RestaurantWhereInput
}

export type RestaurantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RestaurantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  placeId?: Prisma.SortOrder
  cityId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  photoUrl?: Prisma.SortOrder
}

export type RestaurantAvgOrderByAggregateInput = {
  cityId?: Prisma.SortOrder
}

export type RestaurantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  placeId?: Prisma.SortOrder
  cityId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  photoUrl?: Prisma.SortOrder
}

export type RestaurantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  placeId?: Prisma.SortOrder
  cityId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  photoUrl?: Prisma.SortOrder
}

export type RestaurantSumOrderByAggregateInput = {
  cityId?: Prisma.SortOrder
}

export type RestaurantScalarRelationFilter = {
  is?: Prisma.RestaurantWhereInput
  isNot?: Prisma.RestaurantWhereInput
}

export type RestaurantCreateNestedManyWithoutCityInput = {
  create?: Prisma.XOR<Prisma.RestaurantCreateWithoutCityInput, Prisma.RestaurantUncheckedCreateWithoutCityInput> | Prisma.RestaurantCreateWithoutCityInput[] | Prisma.RestaurantUncheckedCreateWithoutCityInput[]
  connectOrCreate?: Prisma.RestaurantCreateOrConnectWithoutCityInput | Prisma.RestaurantCreateOrConnectWithoutCityInput[]
  createMany?: Prisma.RestaurantCreateManyCityInputEnvelope
  connect?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
}

export type RestaurantUncheckedCreateNestedManyWithoutCityInput = {
  create?: Prisma.XOR<Prisma.RestaurantCreateWithoutCityInput, Prisma.RestaurantUncheckedCreateWithoutCityInput> | Prisma.RestaurantCreateWithoutCityInput[] | Prisma.RestaurantUncheckedCreateWithoutCityInput[]
  connectOrCreate?: Prisma.RestaurantCreateOrConnectWithoutCityInput | Prisma.RestaurantCreateOrConnectWithoutCityInput[]
  createMany?: Prisma.RestaurantCreateManyCityInputEnvelope
  connect?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
}

export type RestaurantUpdateManyWithoutCityNestedInput = {
  create?: Prisma.XOR<Prisma.RestaurantCreateWithoutCityInput, Prisma.RestaurantUncheckedCreateWithoutCityInput> | Prisma.RestaurantCreateWithoutCityInput[] | Prisma.RestaurantUncheckedCreateWithoutCityInput[]
  connectOrCreate?: Prisma.RestaurantCreateOrConnectWithoutCityInput | Prisma.RestaurantCreateOrConnectWithoutCityInput[]
  upsert?: Prisma.RestaurantUpsertWithWhereUniqueWithoutCityInput | Prisma.RestaurantUpsertWithWhereUniqueWithoutCityInput[]
  createMany?: Prisma.RestaurantCreateManyCityInputEnvelope
  set?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
  disconnect?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
  delete?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
  connect?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
  update?: Prisma.RestaurantUpdateWithWhereUniqueWithoutCityInput | Prisma.RestaurantUpdateWithWhereUniqueWithoutCityInput[]
  updateMany?: Prisma.RestaurantUpdateManyWithWhereWithoutCityInput | Prisma.RestaurantUpdateManyWithWhereWithoutCityInput[]
  deleteMany?: Prisma.RestaurantScalarWhereInput | Prisma.RestaurantScalarWhereInput[]
}

export type RestaurantUncheckedUpdateManyWithoutCityNestedInput = {
  create?: Prisma.XOR<Prisma.RestaurantCreateWithoutCityInput, Prisma.RestaurantUncheckedCreateWithoutCityInput> | Prisma.RestaurantCreateWithoutCityInput[] | Prisma.RestaurantUncheckedCreateWithoutCityInput[]
  connectOrCreate?: Prisma.RestaurantCreateOrConnectWithoutCityInput | Prisma.RestaurantCreateOrConnectWithoutCityInput[]
  upsert?: Prisma.RestaurantUpsertWithWhereUniqueWithoutCityInput | Prisma.RestaurantUpsertWithWhereUniqueWithoutCityInput[]
  createMany?: Prisma.RestaurantCreateManyCityInputEnvelope
  set?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
  disconnect?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
  delete?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
  connect?: Prisma.RestaurantWhereUniqueInput | Prisma.RestaurantWhereUniqueInput[]
  update?: Prisma.RestaurantUpdateWithWhereUniqueWithoutCityInput | Prisma.RestaurantUpdateWithWhereUniqueWithoutCityInput[]
  updateMany?: Prisma.RestaurantUpdateManyWithWhereWithoutCityInput | Prisma.RestaurantUpdateManyWithWhereWithoutCityInput[]
  deleteMany?: Prisma.RestaurantScalarWhereInput | Prisma.RestaurantScalarWhereInput[]
}

export type NullableBigIntFieldUpdateOperationsInput = {
  set?: bigint | number | null
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type RestaurantCreateNestedOneWithoutReportInput = {
  create?: Prisma.XOR<Prisma.RestaurantCreateWithoutReportInput, Prisma.RestaurantUncheckedCreateWithoutReportInput>
  connectOrCreate?: Prisma.RestaurantCreateOrConnectWithoutReportInput
  connect?: Prisma.RestaurantWhereUniqueInput
}

export type RestaurantUpdateOneRequiredWithoutReportNestedInput = {
  create?: Prisma.XOR<Prisma.RestaurantCreateWithoutReportInput, Prisma.RestaurantUncheckedCreateWithoutReportInput>
  connectOrCreate?: Prisma.RestaurantCreateOrConnectWithoutReportInput
  upsert?: Prisma.RestaurantUpsertWithoutReportInput
  connect?: Prisma.RestaurantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RestaurantUpdateToOneWithWhereWithoutReportInput, Prisma.RestaurantUpdateWithoutReportInput>, Prisma.RestaurantUncheckedUpdateWithoutReportInput>
}

export type RestaurantCreateWithoutCityInput = {
  id?: string
  createdAt?: Date | string
  placeId: string
  name?: string | null
  address?: string | null
  photoUrl?: string | null
  report?: Prisma.RestaurantReportCreateNestedOneWithoutRestaurantInput
}

export type RestaurantUncheckedCreateWithoutCityInput = {
  id?: string
  createdAt?: Date | string
  placeId: string
  name?: string | null
  address?: string | null
  photoUrl?: string | null
  report?: Prisma.RestaurantReportUncheckedCreateNestedOneWithoutRestaurantInput
}

export type RestaurantCreateOrConnectWithoutCityInput = {
  where: Prisma.RestaurantWhereUniqueInput
  create: Prisma.XOR<Prisma.RestaurantCreateWithoutCityInput, Prisma.RestaurantUncheckedCreateWithoutCityInput>
}

export type RestaurantCreateManyCityInputEnvelope = {
  data: Prisma.RestaurantCreateManyCityInput | Prisma.RestaurantCreateManyCityInput[]
  skipDuplicates?: boolean
}

export type RestaurantUpsertWithWhereUniqueWithoutCityInput = {
  where: Prisma.RestaurantWhereUniqueInput
  update: Prisma.XOR<Prisma.RestaurantUpdateWithoutCityInput, Prisma.RestaurantUncheckedUpdateWithoutCityInput>
  create: Prisma.XOR<Prisma.RestaurantCreateWithoutCityInput, Prisma.RestaurantUncheckedCreateWithoutCityInput>
}

export type RestaurantUpdateWithWhereUniqueWithoutCityInput = {
  where: Prisma.RestaurantWhereUniqueInput
  data: Prisma.XOR<Prisma.RestaurantUpdateWithoutCityInput, Prisma.RestaurantUncheckedUpdateWithoutCityInput>
}

export type RestaurantUpdateManyWithWhereWithoutCityInput = {
  where: Prisma.RestaurantScalarWhereInput
  data: Prisma.XOR<Prisma.RestaurantUpdateManyMutationInput, Prisma.RestaurantUncheckedUpdateManyWithoutCityInput>
}

export type RestaurantScalarWhereInput = {
  AND?: Prisma.RestaurantScalarWhereInput | Prisma.RestaurantScalarWhereInput[]
  OR?: Prisma.RestaurantScalarWhereInput[]
  NOT?: Prisma.RestaurantScalarWhereInput | Prisma.RestaurantScalarWhereInput[]
  id?: Prisma.UuidFilter<"Restaurant"> | string
  createdAt?: Prisma.DateTimeFilter<"Restaurant"> | Date | string
  placeId?: Prisma.StringFilter<"Restaurant"> | string
  cityId?: Prisma.BigIntNullableFilter<"Restaurant"> | bigint | number | null
  name?: Prisma.StringNullableFilter<"Restaurant"> | string | null
  address?: Prisma.StringNullableFilter<"Restaurant"> | string | null
  photoUrl?: Prisma.StringNullableFilter<"Restaurant"> | string | null
}

export type RestaurantCreateWithoutReportInput = {
  id?: string
  createdAt?: Date | string
  placeId: string
  name?: string | null
  address?: string | null
  photoUrl?: string | null
  city?: Prisma.CityCreateNestedOneWithoutRestaurantsInput
}

export type RestaurantUncheckedCreateWithoutReportInput = {
  id?: string
  createdAt?: Date | string
  placeId: string
  cityId?: bigint | number | null
  name?: string | null
  address?: string | null
  photoUrl?: string | null
}

export type RestaurantCreateOrConnectWithoutReportInput = {
  where: Prisma.RestaurantWhereUniqueInput
  create: Prisma.XOR<Prisma.RestaurantCreateWithoutReportInput, Prisma.RestaurantUncheckedCreateWithoutReportInput>
}

export type RestaurantUpsertWithoutReportInput = {
  update: Prisma.XOR<Prisma.RestaurantUpdateWithoutReportInput, Prisma.RestaurantUncheckedUpdateWithoutReportInput>
  create: Prisma.XOR<Prisma.RestaurantCreateWithoutReportInput, Prisma.RestaurantUncheckedCreateWithoutReportInput>
  where?: Prisma.RestaurantWhereInput
}

export type RestaurantUpdateToOneWithWhereWithoutReportInput = {
  where?: Prisma.RestaurantWhereInput
  data: Prisma.XOR<Prisma.RestaurantUpdateWithoutReportInput, Prisma.RestaurantUncheckedUpdateWithoutReportInput>
}

export type RestaurantUpdateWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.CityUpdateOneWithoutRestaurantsNestedInput
}

export type RestaurantUncheckedUpdateWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  cityId?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type RestaurantCreateManyCityInput = {
  id?: string
  createdAt?: Date | string
  placeId: string
  name?: string | null
  address?: string | null
  photoUrl?: string | null
}

export type RestaurantUpdateWithoutCityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  report?: Prisma.RestaurantReportUpdateOneWithoutRestaurantNestedInput
}

export type RestaurantUncheckedUpdateWithoutCityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  report?: Prisma.RestaurantReportUncheckedUpdateOneWithoutRestaurantNestedInput
}

export type RestaurantUncheckedUpdateManyWithoutCityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  placeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  photoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type RestaurantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  placeId?: boolean
  cityId?: boolean
  name?: boolean
  address?: boolean
  photoUrl?: boolean
  city?: boolean | Prisma.Restaurant$cityArgs<ExtArgs>
  report?: boolean | Prisma.Restaurant$reportArgs<ExtArgs>
}, ExtArgs["result"]["restaurant"]>

export type RestaurantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  placeId?: boolean
  cityId?: boolean
  name?: boolean
  address?: boolean
  photoUrl?: boolean
  city?: boolean | Prisma.Restaurant$cityArgs<ExtArgs>
}, ExtArgs["result"]["restaurant"]>

export type RestaurantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  placeId?: boolean
  cityId?: boolean
  name?: boolean
  address?: boolean
  photoUrl?: boolean
  city?: boolean | Prisma.Restaurant$cityArgs<ExtArgs>
}, ExtArgs["result"]["restaurant"]>

export type RestaurantSelectScalar = {
  id?: boolean
  createdAt?: boolean
  placeId?: boolean
  cityId?: boolean
  name?: boolean
  address?: boolean
  photoUrl?: boolean
}

export type RestaurantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "placeId" | "cityId" | "name" | "address" | "photoUrl", ExtArgs["result"]["restaurant"]>
export type RestaurantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  city?: boolean | Prisma.Restaurant$cityArgs<ExtArgs>
  report?: boolean | Prisma.Restaurant$reportArgs<ExtArgs>
}
export type RestaurantIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  city?: boolean | Prisma.Restaurant$cityArgs<ExtArgs>
}
export type RestaurantIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  city?: boolean | Prisma.Restaurant$cityArgs<ExtArgs>
}

export type $RestaurantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Restaurant"
  objects: {
    city: Prisma.$CityPayload<ExtArgs> | null
    report: Prisma.$RestaurantReportPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    placeId: string
    cityId: bigint | null
    name: string | null
    address: string | null
    photoUrl: string | null
  }, ExtArgs["result"]["restaurant"]>
  composites: {}
}

export type RestaurantGetPayload<S extends boolean | null | undefined | RestaurantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RestaurantPayload, S>

export type RestaurantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RestaurantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RestaurantCountAggregateInputType | true
  }

export interface RestaurantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Restaurant'], meta: { name: 'Restaurant' } }
  /**
   * Find zero or one Restaurant that matches the filter.
   * @param {RestaurantFindUniqueArgs} args - Arguments to find a Restaurant
   * @example
   * // Get one Restaurant
   * const restaurant = await prisma.restaurant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RestaurantFindUniqueArgs>(args: Prisma.SelectSubset<T, RestaurantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Restaurant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RestaurantFindUniqueOrThrowArgs} args - Arguments to find a Restaurant
   * @example
   * // Get one Restaurant
   * const restaurant = await prisma.restaurant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RestaurantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RestaurantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Restaurant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantFindFirstArgs} args - Arguments to find a Restaurant
   * @example
   * // Get one Restaurant
   * const restaurant = await prisma.restaurant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RestaurantFindFirstArgs>(args?: Prisma.SelectSubset<T, RestaurantFindFirstArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Restaurant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantFindFirstOrThrowArgs} args - Arguments to find a Restaurant
   * @example
   * // Get one Restaurant
   * const restaurant = await prisma.restaurant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RestaurantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RestaurantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Restaurants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Restaurants
   * const restaurants = await prisma.restaurant.findMany()
   * 
   * // Get first 10 Restaurants
   * const restaurants = await prisma.restaurant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const restaurantWithIdOnly = await prisma.restaurant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RestaurantFindManyArgs>(args?: Prisma.SelectSubset<T, RestaurantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Restaurant.
   * @param {RestaurantCreateArgs} args - Arguments to create a Restaurant.
   * @example
   * // Create one Restaurant
   * const Restaurant = await prisma.restaurant.create({
   *   data: {
   *     // ... data to create a Restaurant
   *   }
   * })
   * 
   */
  create<T extends RestaurantCreateArgs>(args: Prisma.SelectSubset<T, RestaurantCreateArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Restaurants.
   * @param {RestaurantCreateManyArgs} args - Arguments to create many Restaurants.
   * @example
   * // Create many Restaurants
   * const restaurant = await prisma.restaurant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RestaurantCreateManyArgs>(args?: Prisma.SelectSubset<T, RestaurantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Restaurants and returns the data saved in the database.
   * @param {RestaurantCreateManyAndReturnArgs} args - Arguments to create many Restaurants.
   * @example
   * // Create many Restaurants
   * const restaurant = await prisma.restaurant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Restaurants and only return the `id`
   * const restaurantWithIdOnly = await prisma.restaurant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RestaurantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RestaurantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Restaurant.
   * @param {RestaurantDeleteArgs} args - Arguments to delete one Restaurant.
   * @example
   * // Delete one Restaurant
   * const Restaurant = await prisma.restaurant.delete({
   *   where: {
   *     // ... filter to delete one Restaurant
   *   }
   * })
   * 
   */
  delete<T extends RestaurantDeleteArgs>(args: Prisma.SelectSubset<T, RestaurantDeleteArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Restaurant.
   * @param {RestaurantUpdateArgs} args - Arguments to update one Restaurant.
   * @example
   * // Update one Restaurant
   * const restaurant = await prisma.restaurant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RestaurantUpdateArgs>(args: Prisma.SelectSubset<T, RestaurantUpdateArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Restaurants.
   * @param {RestaurantDeleteManyArgs} args - Arguments to filter Restaurants to delete.
   * @example
   * // Delete a few Restaurants
   * const { count } = await prisma.restaurant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RestaurantDeleteManyArgs>(args?: Prisma.SelectSubset<T, RestaurantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Restaurants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Restaurants
   * const restaurant = await prisma.restaurant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RestaurantUpdateManyArgs>(args: Prisma.SelectSubset<T, RestaurantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Restaurants and returns the data updated in the database.
   * @param {RestaurantUpdateManyAndReturnArgs} args - Arguments to update many Restaurants.
   * @example
   * // Update many Restaurants
   * const restaurant = await prisma.restaurant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Restaurants and only return the `id`
   * const restaurantWithIdOnly = await prisma.restaurant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RestaurantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RestaurantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Restaurant.
   * @param {RestaurantUpsertArgs} args - Arguments to update or create a Restaurant.
   * @example
   * // Update or create a Restaurant
   * const restaurant = await prisma.restaurant.upsert({
   *   create: {
   *     // ... data to create a Restaurant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Restaurant we want to update
   *   }
   * })
   */
  upsert<T extends RestaurantUpsertArgs>(args: Prisma.SelectSubset<T, RestaurantUpsertArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Restaurants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantCountArgs} args - Arguments to filter Restaurants to count.
   * @example
   * // Count the number of Restaurants
   * const count = await prisma.restaurant.count({
   *   where: {
   *     // ... the filter for the Restaurants we want to count
   *   }
   * })
  **/
  count<T extends RestaurantCountArgs>(
    args?: Prisma.Subset<T, RestaurantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RestaurantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Restaurant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RestaurantAggregateArgs>(args: Prisma.Subset<T, RestaurantAggregateArgs>): Prisma.PrismaPromise<GetRestaurantAggregateType<T>>

  /**
   * Group by Restaurant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RestaurantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RestaurantGroupByArgs['orderBy'] }
      : { orderBy?: RestaurantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RestaurantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Restaurant model
 */
readonly fields: RestaurantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Restaurant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RestaurantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  city<T extends Prisma.Restaurant$cityArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Restaurant$cityArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  report<T extends Prisma.Restaurant$reportArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Restaurant$reportArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Restaurant model
 */
export interface RestaurantFieldRefs {
  readonly id: Prisma.FieldRef<"Restaurant", 'String'>
  readonly createdAt: Prisma.FieldRef<"Restaurant", 'DateTime'>
  readonly placeId: Prisma.FieldRef<"Restaurant", 'String'>
  readonly cityId: Prisma.FieldRef<"Restaurant", 'BigInt'>
  readonly name: Prisma.FieldRef<"Restaurant", 'String'>
  readonly address: Prisma.FieldRef<"Restaurant", 'String'>
  readonly photoUrl: Prisma.FieldRef<"Restaurant", 'String'>
}
    

// Custom InputTypes
/**
 * Restaurant findUnique
 */
export type RestaurantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * Filter, which Restaurant to fetch.
   */
  where: Prisma.RestaurantWhereUniqueInput
}

/**
 * Restaurant findUniqueOrThrow
 */
export type RestaurantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * Filter, which Restaurant to fetch.
   */
  where: Prisma.RestaurantWhereUniqueInput
}

/**
 * Restaurant findFirst
 */
export type RestaurantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * Filter, which Restaurant to fetch.
   */
  where?: Prisma.RestaurantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Restaurants to fetch.
   */
  orderBy?: Prisma.RestaurantOrderByWithRelationInput | Prisma.RestaurantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Restaurants.
   */
  cursor?: Prisma.RestaurantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Restaurants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Restaurants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Restaurants.
   */
  distinct?: Prisma.RestaurantScalarFieldEnum | Prisma.RestaurantScalarFieldEnum[]
}

/**
 * Restaurant findFirstOrThrow
 */
export type RestaurantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * Filter, which Restaurant to fetch.
   */
  where?: Prisma.RestaurantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Restaurants to fetch.
   */
  orderBy?: Prisma.RestaurantOrderByWithRelationInput | Prisma.RestaurantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Restaurants.
   */
  cursor?: Prisma.RestaurantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Restaurants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Restaurants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Restaurants.
   */
  distinct?: Prisma.RestaurantScalarFieldEnum | Prisma.RestaurantScalarFieldEnum[]
}

/**
 * Restaurant findMany
 */
export type RestaurantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * Filter, which Restaurants to fetch.
   */
  where?: Prisma.RestaurantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Restaurants to fetch.
   */
  orderBy?: Prisma.RestaurantOrderByWithRelationInput | Prisma.RestaurantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Restaurants.
   */
  cursor?: Prisma.RestaurantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Restaurants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Restaurants.
   */
  skip?: number
  distinct?: Prisma.RestaurantScalarFieldEnum | Prisma.RestaurantScalarFieldEnum[]
}

/**
 * Restaurant create
 */
export type RestaurantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * The data needed to create a Restaurant.
   */
  data: Prisma.XOR<Prisma.RestaurantCreateInput, Prisma.RestaurantUncheckedCreateInput>
}

/**
 * Restaurant createMany
 */
export type RestaurantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Restaurants.
   */
  data: Prisma.RestaurantCreateManyInput | Prisma.RestaurantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Restaurant createManyAndReturn
 */
export type RestaurantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * The data used to create many Restaurants.
   */
  data: Prisma.RestaurantCreateManyInput | Prisma.RestaurantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Restaurant update
 */
export type RestaurantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * The data needed to update a Restaurant.
   */
  data: Prisma.XOR<Prisma.RestaurantUpdateInput, Prisma.RestaurantUncheckedUpdateInput>
  /**
   * Choose, which Restaurant to update.
   */
  where: Prisma.RestaurantWhereUniqueInput
}

/**
 * Restaurant updateMany
 */
export type RestaurantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Restaurants.
   */
  data: Prisma.XOR<Prisma.RestaurantUpdateManyMutationInput, Prisma.RestaurantUncheckedUpdateManyInput>
  /**
   * Filter which Restaurants to update
   */
  where?: Prisma.RestaurantWhereInput
  /**
   * Limit how many Restaurants to update.
   */
  limit?: number
}

/**
 * Restaurant updateManyAndReturn
 */
export type RestaurantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * The data used to update Restaurants.
   */
  data: Prisma.XOR<Prisma.RestaurantUpdateManyMutationInput, Prisma.RestaurantUncheckedUpdateManyInput>
  /**
   * Filter which Restaurants to update
   */
  where?: Prisma.RestaurantWhereInput
  /**
   * Limit how many Restaurants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Restaurant upsert
 */
export type RestaurantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * The filter to search for the Restaurant to update in case it exists.
   */
  where: Prisma.RestaurantWhereUniqueInput
  /**
   * In case the Restaurant found by the `where` argument doesn't exist, create a new Restaurant with this data.
   */
  create: Prisma.XOR<Prisma.RestaurantCreateInput, Prisma.RestaurantUncheckedCreateInput>
  /**
   * In case the Restaurant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RestaurantUpdateInput, Prisma.RestaurantUncheckedUpdateInput>
}

/**
 * Restaurant delete
 */
export type RestaurantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  /**
   * Filter which Restaurant to delete.
   */
  where: Prisma.RestaurantWhereUniqueInput
}

/**
 * Restaurant deleteMany
 */
export type RestaurantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Restaurants to delete
   */
  where?: Prisma.RestaurantWhereInput
  /**
   * Limit how many Restaurants to delete.
   */
  limit?: number
}

/**
 * Restaurant.city
 */
export type Restaurant$cityArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  where?: Prisma.CityWhereInput
}

/**
 * Restaurant.report
 */
export type Restaurant$reportArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  where?: Prisma.RestaurantReportWhereInput
}

/**
 * Restaurant without action
 */
export type RestaurantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
}
