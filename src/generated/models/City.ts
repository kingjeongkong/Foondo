
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `City` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model City
 * 
 */
export type CityModel = runtime.Types.Result.DefaultSelection<Prisma.$CityPayload>

export type AggregateCity = {
  _count: CityCountAggregateOutputType | null
  _avg: CityAvgAggregateOutputType | null
  _sum: CitySumAggregateOutputType | null
  _min: CityMinAggregateOutputType | null
  _max: CityMaxAggregateOutputType | null
}

export type CityAvgAggregateOutputType = {
  id: number | null
}

export type CitySumAggregateOutputType = {
  id: bigint | null
}

export type CityMinAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  name: string | null
  country: string | null
}

export type CityMaxAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  name: string | null
  country: string | null
}

export type CityCountAggregateOutputType = {
  id: number
  createdAt: number
  name: number
  country: number
  _all: number
}


export type CityAvgAggregateInputType = {
  id?: true
}

export type CitySumAggregateInputType = {
  id?: true
}

export type CityMinAggregateInputType = {
  id?: true
  createdAt?: true
  name?: true
  country?: true
}

export type CityMaxAggregateInputType = {
  id?: true
  createdAt?: true
  name?: true
  country?: true
}

export type CityCountAggregateInputType = {
  id?: true
  createdAt?: true
  name?: true
  country?: true
  _all?: true
}

export type CityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which City to aggregate.
   */
  where?: Prisma.CityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cities to fetch.
   */
  orderBy?: Prisma.CityOrderByWithRelationInput | Prisma.CityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Cities
  **/
  _count?: true | CityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CityAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CitySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CityMaxAggregateInputType
}

export type GetCityAggregateType<T extends CityAggregateArgs> = {
      [P in keyof T & keyof AggregateCity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCity[P]>
    : Prisma.GetScalarType<T[P], AggregateCity[P]>
}




export type CityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CityWhereInput
  orderBy?: Prisma.CityOrderByWithAggregationInput | Prisma.CityOrderByWithAggregationInput[]
  by: Prisma.CityScalarFieldEnum[] | Prisma.CityScalarFieldEnum
  having?: Prisma.CityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CityCountAggregateInputType | true
  _avg?: CityAvgAggregateInputType
  _sum?: CitySumAggregateInputType
  _min?: CityMinAggregateInputType
  _max?: CityMaxAggregateInputType
}

export type CityGroupByOutputType = {
  id: bigint
  createdAt: Date
  name: string
  country: string | null
  _count: CityCountAggregateOutputType | null
  _avg: CityAvgAggregateOutputType | null
  _sum: CitySumAggregateOutputType | null
  _min: CityMinAggregateOutputType | null
  _max: CityMaxAggregateOutputType | null
}

type GetCityGroupByPayload<T extends CityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CityGroupByOutputType[P]>
      }
    >
  >



export type CityWhereInput = {
  AND?: Prisma.CityWhereInput | Prisma.CityWhereInput[]
  OR?: Prisma.CityWhereInput[]
  NOT?: Prisma.CityWhereInput | Prisma.CityWhereInput[]
  id?: Prisma.BigIntFilter<"City"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"City"> | Date | string
  name?: Prisma.StringFilter<"City"> | string
  country?: Prisma.StringNullableFilter<"City"> | string | null
  foods?: Prisma.FoodListRelationFilter
  restaurants?: Prisma.RestaurantListRelationFilter
}

export type CityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  name?: Prisma.SortOrder
  country?: Prisma.SortOrderInput | Prisma.SortOrder
  foods?: Prisma.FoodOrderByRelationAggregateInput
  restaurants?: Prisma.RestaurantOrderByRelationAggregateInput
}

export type CityWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  name_country?: Prisma.CityNameCountryCompoundUniqueInput
  AND?: Prisma.CityWhereInput | Prisma.CityWhereInput[]
  OR?: Prisma.CityWhereInput[]
  NOT?: Prisma.CityWhereInput | Prisma.CityWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"City"> | Date | string
  name?: Prisma.StringFilter<"City"> | string
  country?: Prisma.StringNullableFilter<"City"> | string | null
  foods?: Prisma.FoodListRelationFilter
  restaurants?: Prisma.RestaurantListRelationFilter
}, "id" | "name_country">

export type CityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  name?: Prisma.SortOrder
  country?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CityCountOrderByAggregateInput
  _avg?: Prisma.CityAvgOrderByAggregateInput
  _max?: Prisma.CityMaxOrderByAggregateInput
  _min?: Prisma.CityMinOrderByAggregateInput
  _sum?: Prisma.CitySumOrderByAggregateInput
}

export type CityScalarWhereWithAggregatesInput = {
  AND?: Prisma.CityScalarWhereWithAggregatesInput | Prisma.CityScalarWhereWithAggregatesInput[]
  OR?: Prisma.CityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CityScalarWhereWithAggregatesInput | Prisma.CityScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"City"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"City"> | Date | string
  name?: Prisma.StringWithAggregatesFilter<"City"> | string
  country?: Prisma.StringNullableWithAggregatesFilter<"City"> | string | null
}

export type CityCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  name: string
  country?: string | null
  foods?: Prisma.FoodCreateNestedManyWithoutCityInput
  restaurants?: Prisma.RestaurantCreateNestedManyWithoutCityInput
}

export type CityUncheckedCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  name: string
  country?: string | null
  foods?: Prisma.FoodUncheckedCreateNestedManyWithoutCityInput
  restaurants?: Prisma.RestaurantUncheckedCreateNestedManyWithoutCityInput
}

export type CityUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  foods?: Prisma.FoodUpdateManyWithoutCityNestedInput
  restaurants?: Prisma.RestaurantUpdateManyWithoutCityNestedInput
}

export type CityUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  foods?: Prisma.FoodUncheckedUpdateManyWithoutCityNestedInput
  restaurants?: Prisma.RestaurantUncheckedUpdateManyWithoutCityNestedInput
}

export type CityCreateManyInput = {
  id?: bigint | number
  createdAt?: Date | string
  name: string
  country?: string | null
}

export type CityUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CityUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CityNameCountryCompoundUniqueInput = {
  name: string
  country: string
}

export type CityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  name?: Prisma.SortOrder
  country?: Prisma.SortOrder
}

export type CityAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  name?: Prisma.SortOrder
  country?: Prisma.SortOrder
}

export type CityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  name?: Prisma.SortOrder
  country?: Prisma.SortOrder
}

export type CitySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CityScalarRelationFilter = {
  is?: Prisma.CityWhereInput
  isNot?: Prisma.CityWhereInput
}

export type CityNullableScalarRelationFilter = {
  is?: Prisma.CityWhereInput | null
  isNot?: Prisma.CityWhereInput | null
}

export type BigIntFieldUpdateOperationsInput = {
  set?: bigint | number
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type CityCreateNestedOneWithoutFoodsInput = {
  create?: Prisma.XOR<Prisma.CityCreateWithoutFoodsInput, Prisma.CityUncheckedCreateWithoutFoodsInput>
  connectOrCreate?: Prisma.CityCreateOrConnectWithoutFoodsInput
  connect?: Prisma.CityWhereUniqueInput
}

export type CityUpdateOneRequiredWithoutFoodsNestedInput = {
  create?: Prisma.XOR<Prisma.CityCreateWithoutFoodsInput, Prisma.CityUncheckedCreateWithoutFoodsInput>
  connectOrCreate?: Prisma.CityCreateOrConnectWithoutFoodsInput
  upsert?: Prisma.CityUpsertWithoutFoodsInput
  connect?: Prisma.CityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CityUpdateToOneWithWhereWithoutFoodsInput, Prisma.CityUpdateWithoutFoodsInput>, Prisma.CityUncheckedUpdateWithoutFoodsInput>
}

export type CityCreateNestedOneWithoutRestaurantsInput = {
  create?: Prisma.XOR<Prisma.CityCreateWithoutRestaurantsInput, Prisma.CityUncheckedCreateWithoutRestaurantsInput>
  connectOrCreate?: Prisma.CityCreateOrConnectWithoutRestaurantsInput
  connect?: Prisma.CityWhereUniqueInput
}

export type CityUpdateOneWithoutRestaurantsNestedInput = {
  create?: Prisma.XOR<Prisma.CityCreateWithoutRestaurantsInput, Prisma.CityUncheckedCreateWithoutRestaurantsInput>
  connectOrCreate?: Prisma.CityCreateOrConnectWithoutRestaurantsInput
  upsert?: Prisma.CityUpsertWithoutRestaurantsInput
  disconnect?: Prisma.CityWhereInput | boolean
  delete?: Prisma.CityWhereInput | boolean
  connect?: Prisma.CityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CityUpdateToOneWithWhereWithoutRestaurantsInput, Prisma.CityUpdateWithoutRestaurantsInput>, Prisma.CityUncheckedUpdateWithoutRestaurantsInput>
}

export type CityCreateWithoutFoodsInput = {
  id?: bigint | number
  createdAt?: Date | string
  name: string
  country?: string | null
  restaurants?: Prisma.RestaurantCreateNestedManyWithoutCityInput
}

export type CityUncheckedCreateWithoutFoodsInput = {
  id?: bigint | number
  createdAt?: Date | string
  name: string
  country?: string | null
  restaurants?: Prisma.RestaurantUncheckedCreateNestedManyWithoutCityInput
}

export type CityCreateOrConnectWithoutFoodsInput = {
  where: Prisma.CityWhereUniqueInput
  create: Prisma.XOR<Prisma.CityCreateWithoutFoodsInput, Prisma.CityUncheckedCreateWithoutFoodsInput>
}

export type CityUpsertWithoutFoodsInput = {
  update: Prisma.XOR<Prisma.CityUpdateWithoutFoodsInput, Prisma.CityUncheckedUpdateWithoutFoodsInput>
  create: Prisma.XOR<Prisma.CityCreateWithoutFoodsInput, Prisma.CityUncheckedCreateWithoutFoodsInput>
  where?: Prisma.CityWhereInput
}

export type CityUpdateToOneWithWhereWithoutFoodsInput = {
  where?: Prisma.CityWhereInput
  data: Prisma.XOR<Prisma.CityUpdateWithoutFoodsInput, Prisma.CityUncheckedUpdateWithoutFoodsInput>
}

export type CityUpdateWithoutFoodsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  restaurants?: Prisma.RestaurantUpdateManyWithoutCityNestedInput
}

export type CityUncheckedUpdateWithoutFoodsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  restaurants?: Prisma.RestaurantUncheckedUpdateManyWithoutCityNestedInput
}

export type CityCreateWithoutRestaurantsInput = {
  id?: bigint | number
  createdAt?: Date | string
  name: string
  country?: string | null
  foods?: Prisma.FoodCreateNestedManyWithoutCityInput
}

export type CityUncheckedCreateWithoutRestaurantsInput = {
  id?: bigint | number
  createdAt?: Date | string
  name: string
  country?: string | null
  foods?: Prisma.FoodUncheckedCreateNestedManyWithoutCityInput
}

export type CityCreateOrConnectWithoutRestaurantsInput = {
  where: Prisma.CityWhereUniqueInput
  create: Prisma.XOR<Prisma.CityCreateWithoutRestaurantsInput, Prisma.CityUncheckedCreateWithoutRestaurantsInput>
}

export type CityUpsertWithoutRestaurantsInput = {
  update: Prisma.XOR<Prisma.CityUpdateWithoutRestaurantsInput, Prisma.CityUncheckedUpdateWithoutRestaurantsInput>
  create: Prisma.XOR<Prisma.CityCreateWithoutRestaurantsInput, Prisma.CityUncheckedCreateWithoutRestaurantsInput>
  where?: Prisma.CityWhereInput
}

export type CityUpdateToOneWithWhereWithoutRestaurantsInput = {
  where?: Prisma.CityWhereInput
  data: Prisma.XOR<Prisma.CityUpdateWithoutRestaurantsInput, Prisma.CityUncheckedUpdateWithoutRestaurantsInput>
}

export type CityUpdateWithoutRestaurantsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  foods?: Prisma.FoodUpdateManyWithoutCityNestedInput
}

export type CityUncheckedUpdateWithoutRestaurantsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  foods?: Prisma.FoodUncheckedUpdateManyWithoutCityNestedInput
}


/**
 * Count Type CityCountOutputType
 */

export type CityCountOutputType = {
  foods: number
  restaurants: number
}

export type CityCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  foods?: boolean | CityCountOutputTypeCountFoodsArgs
  restaurants?: boolean | CityCountOutputTypeCountRestaurantsArgs
}

/**
 * CityCountOutputType without action
 */
export type CityCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CityCountOutputType
   */
  select?: Prisma.CityCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CityCountOutputType without action
 */
export type CityCountOutputTypeCountFoodsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FoodWhereInput
}

/**
 * CityCountOutputType without action
 */
export type CityCountOutputTypeCountRestaurantsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RestaurantWhereInput
}


export type CitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  name?: boolean
  country?: boolean
  foods?: boolean | Prisma.City$foodsArgs<ExtArgs>
  restaurants?: boolean | Prisma.City$restaurantsArgs<ExtArgs>
  _count?: boolean | Prisma.CityCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["city"]>

export type CitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  name?: boolean
  country?: boolean
}, ExtArgs["result"]["city"]>

export type CitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  name?: boolean
  country?: boolean
}, ExtArgs["result"]["city"]>

export type CitySelectScalar = {
  id?: boolean
  createdAt?: boolean
  name?: boolean
  country?: boolean
}

export type CityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "name" | "country", ExtArgs["result"]["city"]>
export type CityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  foods?: boolean | Prisma.City$foodsArgs<ExtArgs>
  restaurants?: boolean | Prisma.City$restaurantsArgs<ExtArgs>
  _count?: boolean | Prisma.CityCountOutputTypeDefaultArgs<ExtArgs>
}
export type CityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "City"
  objects: {
    foods: Prisma.$FoodPayload<ExtArgs>[]
    restaurants: Prisma.$RestaurantPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    createdAt: Date
    name: string
    country: string | null
  }, ExtArgs["result"]["city"]>
  composites: {}
}

export type CityGetPayload<S extends boolean | null | undefined | CityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CityPayload, S>

export type CityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CityCountAggregateInputType | true
  }

export interface CityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['City'], meta: { name: 'City' } }
  /**
   * Find zero or one City that matches the filter.
   * @param {CityFindUniqueArgs} args - Arguments to find a City
   * @example
   * // Get one City
   * const city = await prisma.city.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CityFindUniqueArgs>(args: Prisma.SelectSubset<T, CityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one City that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CityFindUniqueOrThrowArgs} args - Arguments to find a City
   * @example
   * // Get one City
   * const city = await prisma.city.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first City that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CityFindFirstArgs} args - Arguments to find a City
   * @example
   * // Get one City
   * const city = await prisma.city.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CityFindFirstArgs>(args?: Prisma.SelectSubset<T, CityFindFirstArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first City that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CityFindFirstOrThrowArgs} args - Arguments to find a City
   * @example
   * // Get one City
   * const city = await prisma.city.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Cities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Cities
   * const cities = await prisma.city.findMany()
   * 
   * // Get first 10 Cities
   * const cities = await prisma.city.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const cityWithIdOnly = await prisma.city.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CityFindManyArgs>(args?: Prisma.SelectSubset<T, CityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a City.
   * @param {CityCreateArgs} args - Arguments to create a City.
   * @example
   * // Create one City
   * const City = await prisma.city.create({
   *   data: {
   *     // ... data to create a City
   *   }
   * })
   * 
   */
  create<T extends CityCreateArgs>(args: Prisma.SelectSubset<T, CityCreateArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Cities.
   * @param {CityCreateManyArgs} args - Arguments to create many Cities.
   * @example
   * // Create many Cities
   * const city = await prisma.city.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CityCreateManyArgs>(args?: Prisma.SelectSubset<T, CityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Cities and returns the data saved in the database.
   * @param {CityCreateManyAndReturnArgs} args - Arguments to create many Cities.
   * @example
   * // Create many Cities
   * const city = await prisma.city.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Cities and only return the `id`
   * const cityWithIdOnly = await prisma.city.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a City.
   * @param {CityDeleteArgs} args - Arguments to delete one City.
   * @example
   * // Delete one City
   * const City = await prisma.city.delete({
   *   where: {
   *     // ... filter to delete one City
   *   }
   * })
   * 
   */
  delete<T extends CityDeleteArgs>(args: Prisma.SelectSubset<T, CityDeleteArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one City.
   * @param {CityUpdateArgs} args - Arguments to update one City.
   * @example
   * // Update one City
   * const city = await prisma.city.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CityUpdateArgs>(args: Prisma.SelectSubset<T, CityUpdateArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Cities.
   * @param {CityDeleteManyArgs} args - Arguments to filter Cities to delete.
   * @example
   * // Delete a few Cities
   * const { count } = await prisma.city.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CityDeleteManyArgs>(args?: Prisma.SelectSubset<T, CityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Cities
   * const city = await prisma.city.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CityUpdateManyArgs>(args: Prisma.SelectSubset<T, CityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cities and returns the data updated in the database.
   * @param {CityUpdateManyAndReturnArgs} args - Arguments to update many Cities.
   * @example
   * // Update many Cities
   * const city = await prisma.city.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Cities and only return the `id`
   * const cityWithIdOnly = await prisma.city.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one City.
   * @param {CityUpsertArgs} args - Arguments to update or create a City.
   * @example
   * // Update or create a City
   * const city = await prisma.city.upsert({
   *   create: {
   *     // ... data to create a City
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the City we want to update
   *   }
   * })
   */
  upsert<T extends CityUpsertArgs>(args: Prisma.SelectSubset<T, CityUpsertArgs<ExtArgs>>): Prisma.Prisma__CityClient<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Cities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CityCountArgs} args - Arguments to filter Cities to count.
   * @example
   * // Count the number of Cities
   * const count = await prisma.city.count({
   *   where: {
   *     // ... the filter for the Cities we want to count
   *   }
   * })
  **/
  count<T extends CityCountArgs>(
    args?: Prisma.Subset<T, CityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a City.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CityAggregateArgs>(args: Prisma.Subset<T, CityAggregateArgs>): Prisma.PrismaPromise<GetCityAggregateType<T>>

  /**
   * Group by City.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CityGroupByArgs['orderBy'] }
      : { orderBy?: CityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the City model
 */
readonly fields: CityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for City.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  foods<T extends Prisma.City$foodsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.City$foodsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  restaurants<T extends Prisma.City$restaurantsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.City$restaurantsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the City model
 */
export interface CityFieldRefs {
  readonly id: Prisma.FieldRef<"City", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"City", 'DateTime'>
  readonly name: Prisma.FieldRef<"City", 'String'>
  readonly country: Prisma.FieldRef<"City", 'String'>
}
    

// Custom InputTypes
/**
 * City findUnique
 */
export type CityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * Filter, which City to fetch.
   */
  where: Prisma.CityWhereUniqueInput
}

/**
 * City findUniqueOrThrow
 */
export type CityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * Filter, which City to fetch.
   */
  where: Prisma.CityWhereUniqueInput
}

/**
 * City findFirst
 */
export type CityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * Filter, which City to fetch.
   */
  where?: Prisma.CityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cities to fetch.
   */
  orderBy?: Prisma.CityOrderByWithRelationInput | Prisma.CityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Cities.
   */
  cursor?: Prisma.CityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Cities.
   */
  distinct?: Prisma.CityScalarFieldEnum | Prisma.CityScalarFieldEnum[]
}

/**
 * City findFirstOrThrow
 */
export type CityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * Filter, which City to fetch.
   */
  where?: Prisma.CityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cities to fetch.
   */
  orderBy?: Prisma.CityOrderByWithRelationInput | Prisma.CityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Cities.
   */
  cursor?: Prisma.CityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Cities.
   */
  distinct?: Prisma.CityScalarFieldEnum | Prisma.CityScalarFieldEnum[]
}

/**
 * City findMany
 */
export type CityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * Filter, which Cities to fetch.
   */
  where?: Prisma.CityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cities to fetch.
   */
  orderBy?: Prisma.CityOrderByWithRelationInput | Prisma.CityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Cities.
   */
  cursor?: Prisma.CityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cities.
   */
  skip?: number
  distinct?: Prisma.CityScalarFieldEnum | Prisma.CityScalarFieldEnum[]
}

/**
 * City create
 */
export type CityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * The data needed to create a City.
   */
  data: Prisma.XOR<Prisma.CityCreateInput, Prisma.CityUncheckedCreateInput>
}

/**
 * City createMany
 */
export type CityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Cities.
   */
  data: Prisma.CityCreateManyInput | Prisma.CityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * City createManyAndReturn
 */
export type CityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * The data used to create many Cities.
   */
  data: Prisma.CityCreateManyInput | Prisma.CityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * City update
 */
export type CityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * The data needed to update a City.
   */
  data: Prisma.XOR<Prisma.CityUpdateInput, Prisma.CityUncheckedUpdateInput>
  /**
   * Choose, which City to update.
   */
  where: Prisma.CityWhereUniqueInput
}

/**
 * City updateMany
 */
export type CityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Cities.
   */
  data: Prisma.XOR<Prisma.CityUpdateManyMutationInput, Prisma.CityUncheckedUpdateManyInput>
  /**
   * Filter which Cities to update
   */
  where?: Prisma.CityWhereInput
  /**
   * Limit how many Cities to update.
   */
  limit?: number
}

/**
 * City updateManyAndReturn
 */
export type CityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * The data used to update Cities.
   */
  data: Prisma.XOR<Prisma.CityUpdateManyMutationInput, Prisma.CityUncheckedUpdateManyInput>
  /**
   * Filter which Cities to update
   */
  where?: Prisma.CityWhereInput
  /**
   * Limit how many Cities to update.
   */
  limit?: number
}

/**
 * City upsert
 */
export type CityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * The filter to search for the City to update in case it exists.
   */
  where: Prisma.CityWhereUniqueInput
  /**
   * In case the City found by the `where` argument doesn't exist, create a new City with this data.
   */
  create: Prisma.XOR<Prisma.CityCreateInput, Prisma.CityUncheckedCreateInput>
  /**
   * In case the City was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CityUpdateInput, Prisma.CityUncheckedUpdateInput>
}

/**
 * City delete
 */
export type CityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  /**
   * Filter which City to delete.
   */
  where: Prisma.CityWhereUniqueInput
}

/**
 * City deleteMany
 */
export type CityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Cities to delete
   */
  where?: Prisma.CityWhereInput
  /**
   * Limit how many Cities to delete.
   */
  limit?: number
}

/**
 * City.foods
 */
export type City$foodsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  where?: Prisma.FoodWhereInput
  orderBy?: Prisma.FoodOrderByWithRelationInput | Prisma.FoodOrderByWithRelationInput[]
  cursor?: Prisma.FoodWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FoodScalarFieldEnum | Prisma.FoodScalarFieldEnum[]
}

/**
 * City.restaurants
 */
export type City$restaurantsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Restaurant
   */
  select?: Prisma.RestaurantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Restaurant
   */
  omit?: Prisma.RestaurantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantInclude<ExtArgs> | null
  where?: Prisma.RestaurantWhereInput
  orderBy?: Prisma.RestaurantOrderByWithRelationInput | Prisma.RestaurantOrderByWithRelationInput[]
  cursor?: Prisma.RestaurantWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RestaurantScalarFieldEnum | Prisma.RestaurantScalarFieldEnum[]
}

/**
 * City without action
 */
export type CityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
}
