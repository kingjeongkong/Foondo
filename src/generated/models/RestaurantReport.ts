
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `RestaurantReport` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RestaurantReport
 * 
 */
export type RestaurantReportModel = runtime.Types.Result.DefaultSelection<Prisma.$RestaurantReportPayload>

export type AggregateRestaurantReport = {
  _count: RestaurantReportCountAggregateOutputType | null
  _avg: RestaurantReportAvgAggregateOutputType | null
  _sum: RestaurantReportSumAggregateOutputType | null
  _min: RestaurantReportMinAggregateOutputType | null
  _max: RestaurantReportMaxAggregateOutputType | null
}

export type RestaurantReportAvgAggregateOutputType = {
  tasteScore: number | null
  priceScore: number | null
  atmosphereScore: number | null
  serviceScore: number | null
  quantityScore: number | null
  accessibilityScore: number | null
}

export type RestaurantReportSumAggregateOutputType = {
  tasteScore: number | null
  priceScore: number | null
  atmosphereScore: number | null
  serviceScore: number | null
  quantityScore: number | null
  accessibilityScore: number | null
}

export type RestaurantReportMinAggregateOutputType = {
  id: string | null
  lastUpdated: Date | null
  restaurantId: string | null
  tasteScore: number | null
  priceScore: number | null
  atmosphereScore: number | null
  serviceScore: number | null
  quantityScore: number | null
  accessibilityScore: number | null
  aiSummary: string | null
}

export type RestaurantReportMaxAggregateOutputType = {
  id: string | null
  lastUpdated: Date | null
  restaurantId: string | null
  tasteScore: number | null
  priceScore: number | null
  atmosphereScore: number | null
  serviceScore: number | null
  quantityScore: number | null
  accessibilityScore: number | null
  aiSummary: string | null
}

export type RestaurantReportCountAggregateOutputType = {
  id: number
  lastUpdated: number
  restaurantId: number
  tasteScore: number
  priceScore: number
  atmosphereScore: number
  serviceScore: number
  quantityScore: number
  accessibilityScore: number
  aiSummary: number
  _all: number
}


export type RestaurantReportAvgAggregateInputType = {
  tasteScore?: true
  priceScore?: true
  atmosphereScore?: true
  serviceScore?: true
  quantityScore?: true
  accessibilityScore?: true
}

export type RestaurantReportSumAggregateInputType = {
  tasteScore?: true
  priceScore?: true
  atmosphereScore?: true
  serviceScore?: true
  quantityScore?: true
  accessibilityScore?: true
}

export type RestaurantReportMinAggregateInputType = {
  id?: true
  lastUpdated?: true
  restaurantId?: true
  tasteScore?: true
  priceScore?: true
  atmosphereScore?: true
  serviceScore?: true
  quantityScore?: true
  accessibilityScore?: true
  aiSummary?: true
}

export type RestaurantReportMaxAggregateInputType = {
  id?: true
  lastUpdated?: true
  restaurantId?: true
  tasteScore?: true
  priceScore?: true
  atmosphereScore?: true
  serviceScore?: true
  quantityScore?: true
  accessibilityScore?: true
  aiSummary?: true
}

export type RestaurantReportCountAggregateInputType = {
  id?: true
  lastUpdated?: true
  restaurantId?: true
  tasteScore?: true
  priceScore?: true
  atmosphereScore?: true
  serviceScore?: true
  quantityScore?: true
  accessibilityScore?: true
  aiSummary?: true
  _all?: true
}

export type RestaurantReportAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RestaurantReport to aggregate.
   */
  where?: Prisma.RestaurantReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RestaurantReports to fetch.
   */
  orderBy?: Prisma.RestaurantReportOrderByWithRelationInput | Prisma.RestaurantReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RestaurantReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RestaurantReports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RestaurantReports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RestaurantReports
  **/
  _count?: true | RestaurantReportCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RestaurantReportAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RestaurantReportSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RestaurantReportMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RestaurantReportMaxAggregateInputType
}

export type GetRestaurantReportAggregateType<T extends RestaurantReportAggregateArgs> = {
      [P in keyof T & keyof AggregateRestaurantReport]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRestaurantReport[P]>
    : Prisma.GetScalarType<T[P], AggregateRestaurantReport[P]>
}




export type RestaurantReportGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RestaurantReportWhereInput
  orderBy?: Prisma.RestaurantReportOrderByWithAggregationInput | Prisma.RestaurantReportOrderByWithAggregationInput[]
  by: Prisma.RestaurantReportScalarFieldEnum[] | Prisma.RestaurantReportScalarFieldEnum
  having?: Prisma.RestaurantReportScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RestaurantReportCountAggregateInputType | true
  _avg?: RestaurantReportAvgAggregateInputType
  _sum?: RestaurantReportSumAggregateInputType
  _min?: RestaurantReportMinAggregateInputType
  _max?: RestaurantReportMaxAggregateInputType
}

export type RestaurantReportGroupByOutputType = {
  id: string
  lastUpdated: Date
  restaurantId: string
  tasteScore: number | null
  priceScore: number | null
  atmosphereScore: number | null
  serviceScore: number | null
  quantityScore: number | null
  accessibilityScore: number | null
  aiSummary: string | null
  _count: RestaurantReportCountAggregateOutputType | null
  _avg: RestaurantReportAvgAggregateOutputType | null
  _sum: RestaurantReportSumAggregateOutputType | null
  _min: RestaurantReportMinAggregateOutputType | null
  _max: RestaurantReportMaxAggregateOutputType | null
}

type GetRestaurantReportGroupByPayload<T extends RestaurantReportGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RestaurantReportGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RestaurantReportGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RestaurantReportGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RestaurantReportGroupByOutputType[P]>
      }
    >
  >



export type RestaurantReportWhereInput = {
  AND?: Prisma.RestaurantReportWhereInput | Prisma.RestaurantReportWhereInput[]
  OR?: Prisma.RestaurantReportWhereInput[]
  NOT?: Prisma.RestaurantReportWhereInput | Prisma.RestaurantReportWhereInput[]
  id?: Prisma.UuidFilter<"RestaurantReport"> | string
  lastUpdated?: Prisma.DateTimeFilter<"RestaurantReport"> | Date | string
  restaurantId?: Prisma.UuidFilter<"RestaurantReport"> | string
  tasteScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  priceScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  atmosphereScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  serviceScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  quantityScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  accessibilityScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  aiSummary?: Prisma.StringNullableFilter<"RestaurantReport"> | string | null
  restaurant?: Prisma.XOR<Prisma.RestaurantScalarRelationFilter, Prisma.RestaurantWhereInput>
}

export type RestaurantReportOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  restaurantId?: Prisma.SortOrder
  tasteScore?: Prisma.SortOrderInput | Prisma.SortOrder
  priceScore?: Prisma.SortOrderInput | Prisma.SortOrder
  atmosphereScore?: Prisma.SortOrderInput | Prisma.SortOrder
  serviceScore?: Prisma.SortOrderInput | Prisma.SortOrder
  quantityScore?: Prisma.SortOrderInput | Prisma.SortOrder
  accessibilityScore?: Prisma.SortOrderInput | Prisma.SortOrder
  aiSummary?: Prisma.SortOrderInput | Prisma.SortOrder
  restaurant?: Prisma.RestaurantOrderByWithRelationInput
}

export type RestaurantReportWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  restaurantId?: string
  AND?: Prisma.RestaurantReportWhereInput | Prisma.RestaurantReportWhereInput[]
  OR?: Prisma.RestaurantReportWhereInput[]
  NOT?: Prisma.RestaurantReportWhereInput | Prisma.RestaurantReportWhereInput[]
  lastUpdated?: Prisma.DateTimeFilter<"RestaurantReport"> | Date | string
  tasteScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  priceScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  atmosphereScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  serviceScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  quantityScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  accessibilityScore?: Prisma.FloatNullableFilter<"RestaurantReport"> | number | null
  aiSummary?: Prisma.StringNullableFilter<"RestaurantReport"> | string | null
  restaurant?: Prisma.XOR<Prisma.RestaurantScalarRelationFilter, Prisma.RestaurantWhereInput>
}, "id" | "restaurantId">

export type RestaurantReportOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  restaurantId?: Prisma.SortOrder
  tasteScore?: Prisma.SortOrderInput | Prisma.SortOrder
  priceScore?: Prisma.SortOrderInput | Prisma.SortOrder
  atmosphereScore?: Prisma.SortOrderInput | Prisma.SortOrder
  serviceScore?: Prisma.SortOrderInput | Prisma.SortOrder
  quantityScore?: Prisma.SortOrderInput | Prisma.SortOrder
  accessibilityScore?: Prisma.SortOrderInput | Prisma.SortOrder
  aiSummary?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.RestaurantReportCountOrderByAggregateInput
  _avg?: Prisma.RestaurantReportAvgOrderByAggregateInput
  _max?: Prisma.RestaurantReportMaxOrderByAggregateInput
  _min?: Prisma.RestaurantReportMinOrderByAggregateInput
  _sum?: Prisma.RestaurantReportSumOrderByAggregateInput
}

export type RestaurantReportScalarWhereWithAggregatesInput = {
  AND?: Prisma.RestaurantReportScalarWhereWithAggregatesInput | Prisma.RestaurantReportScalarWhereWithAggregatesInput[]
  OR?: Prisma.RestaurantReportScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RestaurantReportScalarWhereWithAggregatesInput | Prisma.RestaurantReportScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"RestaurantReport"> | string
  lastUpdated?: Prisma.DateTimeWithAggregatesFilter<"RestaurantReport"> | Date | string
  restaurantId?: Prisma.UuidWithAggregatesFilter<"RestaurantReport"> | string
  tasteScore?: Prisma.FloatNullableWithAggregatesFilter<"RestaurantReport"> | number | null
  priceScore?: Prisma.FloatNullableWithAggregatesFilter<"RestaurantReport"> | number | null
  atmosphereScore?: Prisma.FloatNullableWithAggregatesFilter<"RestaurantReport"> | number | null
  serviceScore?: Prisma.FloatNullableWithAggregatesFilter<"RestaurantReport"> | number | null
  quantityScore?: Prisma.FloatNullableWithAggregatesFilter<"RestaurantReport"> | number | null
  accessibilityScore?: Prisma.FloatNullableWithAggregatesFilter<"RestaurantReport"> | number | null
  aiSummary?: Prisma.StringNullableWithAggregatesFilter<"RestaurantReport"> | string | null
}

export type RestaurantReportCreateInput = {
  id?: string
  lastUpdated?: Date | string
  tasteScore?: number | null
  priceScore?: number | null
  atmosphereScore?: number | null
  serviceScore?: number | null
  quantityScore?: number | null
  accessibilityScore?: number | null
  aiSummary?: string | null
  restaurant: Prisma.RestaurantCreateNestedOneWithoutReportInput
}

export type RestaurantReportUncheckedCreateInput = {
  id?: string
  lastUpdated?: Date | string
  restaurantId: string
  tasteScore?: number | null
  priceScore?: number | null
  atmosphereScore?: number | null
  serviceScore?: number | null
  quantityScore?: number | null
  accessibilityScore?: number | null
  aiSummary?: string | null
}

export type RestaurantReportUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasteScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  priceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  atmosphereScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  serviceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  quantityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  accessibilityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  aiSummary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  restaurant?: Prisma.RestaurantUpdateOneRequiredWithoutReportNestedInput
}

export type RestaurantReportUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  restaurantId?: Prisma.StringFieldUpdateOperationsInput | string
  tasteScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  priceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  atmosphereScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  serviceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  quantityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  accessibilityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  aiSummary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type RestaurantReportCreateManyInput = {
  id?: string
  lastUpdated?: Date | string
  restaurantId: string
  tasteScore?: number | null
  priceScore?: number | null
  atmosphereScore?: number | null
  serviceScore?: number | null
  quantityScore?: number | null
  accessibilityScore?: number | null
  aiSummary?: string | null
}

export type RestaurantReportUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasteScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  priceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  atmosphereScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  serviceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  quantityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  accessibilityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  aiSummary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type RestaurantReportUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  restaurantId?: Prisma.StringFieldUpdateOperationsInput | string
  tasteScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  priceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  atmosphereScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  serviceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  quantityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  accessibilityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  aiSummary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type RestaurantReportNullableScalarRelationFilter = {
  is?: Prisma.RestaurantReportWhereInput | null
  isNot?: Prisma.RestaurantReportWhereInput | null
}

export type RestaurantReportCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  restaurantId?: Prisma.SortOrder
  tasteScore?: Prisma.SortOrder
  priceScore?: Prisma.SortOrder
  atmosphereScore?: Prisma.SortOrder
  serviceScore?: Prisma.SortOrder
  quantityScore?: Prisma.SortOrder
  accessibilityScore?: Prisma.SortOrder
  aiSummary?: Prisma.SortOrder
}

export type RestaurantReportAvgOrderByAggregateInput = {
  tasteScore?: Prisma.SortOrder
  priceScore?: Prisma.SortOrder
  atmosphereScore?: Prisma.SortOrder
  serviceScore?: Prisma.SortOrder
  quantityScore?: Prisma.SortOrder
  accessibilityScore?: Prisma.SortOrder
}

export type RestaurantReportMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  restaurantId?: Prisma.SortOrder
  tasteScore?: Prisma.SortOrder
  priceScore?: Prisma.SortOrder
  atmosphereScore?: Prisma.SortOrder
  serviceScore?: Prisma.SortOrder
  quantityScore?: Prisma.SortOrder
  accessibilityScore?: Prisma.SortOrder
  aiSummary?: Prisma.SortOrder
}

export type RestaurantReportMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  restaurantId?: Prisma.SortOrder
  tasteScore?: Prisma.SortOrder
  priceScore?: Prisma.SortOrder
  atmosphereScore?: Prisma.SortOrder
  serviceScore?: Prisma.SortOrder
  quantityScore?: Prisma.SortOrder
  accessibilityScore?: Prisma.SortOrder
  aiSummary?: Prisma.SortOrder
}

export type RestaurantReportSumOrderByAggregateInput = {
  tasteScore?: Prisma.SortOrder
  priceScore?: Prisma.SortOrder
  atmosphereScore?: Prisma.SortOrder
  serviceScore?: Prisma.SortOrder
  quantityScore?: Prisma.SortOrder
  accessibilityScore?: Prisma.SortOrder
}

export type RestaurantReportCreateNestedOneWithoutRestaurantInput = {
  create?: Prisma.XOR<Prisma.RestaurantReportCreateWithoutRestaurantInput, Prisma.RestaurantReportUncheckedCreateWithoutRestaurantInput>
  connectOrCreate?: Prisma.RestaurantReportCreateOrConnectWithoutRestaurantInput
  connect?: Prisma.RestaurantReportWhereUniqueInput
}

export type RestaurantReportUncheckedCreateNestedOneWithoutRestaurantInput = {
  create?: Prisma.XOR<Prisma.RestaurantReportCreateWithoutRestaurantInput, Prisma.RestaurantReportUncheckedCreateWithoutRestaurantInput>
  connectOrCreate?: Prisma.RestaurantReportCreateOrConnectWithoutRestaurantInput
  connect?: Prisma.RestaurantReportWhereUniqueInput
}

export type RestaurantReportUpdateOneWithoutRestaurantNestedInput = {
  create?: Prisma.XOR<Prisma.RestaurantReportCreateWithoutRestaurantInput, Prisma.RestaurantReportUncheckedCreateWithoutRestaurantInput>
  connectOrCreate?: Prisma.RestaurantReportCreateOrConnectWithoutRestaurantInput
  upsert?: Prisma.RestaurantReportUpsertWithoutRestaurantInput
  disconnect?: Prisma.RestaurantReportWhereInput | boolean
  delete?: Prisma.RestaurantReportWhereInput | boolean
  connect?: Prisma.RestaurantReportWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RestaurantReportUpdateToOneWithWhereWithoutRestaurantInput, Prisma.RestaurantReportUpdateWithoutRestaurantInput>, Prisma.RestaurantReportUncheckedUpdateWithoutRestaurantInput>
}

export type RestaurantReportUncheckedUpdateOneWithoutRestaurantNestedInput = {
  create?: Prisma.XOR<Prisma.RestaurantReportCreateWithoutRestaurantInput, Prisma.RestaurantReportUncheckedCreateWithoutRestaurantInput>
  connectOrCreate?: Prisma.RestaurantReportCreateOrConnectWithoutRestaurantInput
  upsert?: Prisma.RestaurantReportUpsertWithoutRestaurantInput
  disconnect?: Prisma.RestaurantReportWhereInput | boolean
  delete?: Prisma.RestaurantReportWhereInput | boolean
  connect?: Prisma.RestaurantReportWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RestaurantReportUpdateToOneWithWhereWithoutRestaurantInput, Prisma.RestaurantReportUpdateWithoutRestaurantInput>, Prisma.RestaurantReportUncheckedUpdateWithoutRestaurantInput>
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type RestaurantReportCreateWithoutRestaurantInput = {
  id?: string
  lastUpdated?: Date | string
  tasteScore?: number | null
  priceScore?: number | null
  atmosphereScore?: number | null
  serviceScore?: number | null
  quantityScore?: number | null
  accessibilityScore?: number | null
  aiSummary?: string | null
}

export type RestaurantReportUncheckedCreateWithoutRestaurantInput = {
  id?: string
  lastUpdated?: Date | string
  tasteScore?: number | null
  priceScore?: number | null
  atmosphereScore?: number | null
  serviceScore?: number | null
  quantityScore?: number | null
  accessibilityScore?: number | null
  aiSummary?: string | null
}

export type RestaurantReportCreateOrConnectWithoutRestaurantInput = {
  where: Prisma.RestaurantReportWhereUniqueInput
  create: Prisma.XOR<Prisma.RestaurantReportCreateWithoutRestaurantInput, Prisma.RestaurantReportUncheckedCreateWithoutRestaurantInput>
}

export type RestaurantReportUpsertWithoutRestaurantInput = {
  update: Prisma.XOR<Prisma.RestaurantReportUpdateWithoutRestaurantInput, Prisma.RestaurantReportUncheckedUpdateWithoutRestaurantInput>
  create: Prisma.XOR<Prisma.RestaurantReportCreateWithoutRestaurantInput, Prisma.RestaurantReportUncheckedCreateWithoutRestaurantInput>
  where?: Prisma.RestaurantReportWhereInput
}

export type RestaurantReportUpdateToOneWithWhereWithoutRestaurantInput = {
  where?: Prisma.RestaurantReportWhereInput
  data: Prisma.XOR<Prisma.RestaurantReportUpdateWithoutRestaurantInput, Prisma.RestaurantReportUncheckedUpdateWithoutRestaurantInput>
}

export type RestaurantReportUpdateWithoutRestaurantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasteScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  priceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  atmosphereScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  serviceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  quantityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  accessibilityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  aiSummary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type RestaurantReportUncheckedUpdateWithoutRestaurantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasteScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  priceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  atmosphereScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  serviceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  quantityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  accessibilityScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  aiSummary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type RestaurantReportSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  lastUpdated?: boolean
  restaurantId?: boolean
  tasteScore?: boolean
  priceScore?: boolean
  atmosphereScore?: boolean
  serviceScore?: boolean
  quantityScore?: boolean
  accessibilityScore?: boolean
  aiSummary?: boolean
  restaurant?: boolean | Prisma.RestaurantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["restaurantReport"]>

export type RestaurantReportSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  lastUpdated?: boolean
  restaurantId?: boolean
  tasteScore?: boolean
  priceScore?: boolean
  atmosphereScore?: boolean
  serviceScore?: boolean
  quantityScore?: boolean
  accessibilityScore?: boolean
  aiSummary?: boolean
  restaurant?: boolean | Prisma.RestaurantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["restaurantReport"]>

export type RestaurantReportSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  lastUpdated?: boolean
  restaurantId?: boolean
  tasteScore?: boolean
  priceScore?: boolean
  atmosphereScore?: boolean
  serviceScore?: boolean
  quantityScore?: boolean
  accessibilityScore?: boolean
  aiSummary?: boolean
  restaurant?: boolean | Prisma.RestaurantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["restaurantReport"]>

export type RestaurantReportSelectScalar = {
  id?: boolean
  lastUpdated?: boolean
  restaurantId?: boolean
  tasteScore?: boolean
  priceScore?: boolean
  atmosphereScore?: boolean
  serviceScore?: boolean
  quantityScore?: boolean
  accessibilityScore?: boolean
  aiSummary?: boolean
}

export type RestaurantReportOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "lastUpdated" | "restaurantId" | "tasteScore" | "priceScore" | "atmosphereScore" | "serviceScore" | "quantityScore" | "accessibilityScore" | "aiSummary", ExtArgs["result"]["restaurantReport"]>
export type RestaurantReportInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  restaurant?: boolean | Prisma.RestaurantDefaultArgs<ExtArgs>
}
export type RestaurantReportIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  restaurant?: boolean | Prisma.RestaurantDefaultArgs<ExtArgs>
}
export type RestaurantReportIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  restaurant?: boolean | Prisma.RestaurantDefaultArgs<ExtArgs>
}

export type $RestaurantReportPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RestaurantReport"
  objects: {
    restaurant: Prisma.$RestaurantPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    lastUpdated: Date
    restaurantId: string
    tasteScore: number | null
    priceScore: number | null
    atmosphereScore: number | null
    serviceScore: number | null
    quantityScore: number | null
    accessibilityScore: number | null
    aiSummary: string | null
  }, ExtArgs["result"]["restaurantReport"]>
  composites: {}
}

export type RestaurantReportGetPayload<S extends boolean | null | undefined | RestaurantReportDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload, S>

export type RestaurantReportCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RestaurantReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RestaurantReportCountAggregateInputType | true
  }

export interface RestaurantReportDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RestaurantReport'], meta: { name: 'RestaurantReport' } }
  /**
   * Find zero or one RestaurantReport that matches the filter.
   * @param {RestaurantReportFindUniqueArgs} args - Arguments to find a RestaurantReport
   * @example
   * // Get one RestaurantReport
   * const restaurantReport = await prisma.restaurantReport.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RestaurantReportFindUniqueArgs>(args: Prisma.SelectSubset<T, RestaurantReportFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RestaurantReport that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RestaurantReportFindUniqueOrThrowArgs} args - Arguments to find a RestaurantReport
   * @example
   * // Get one RestaurantReport
   * const restaurantReport = await prisma.restaurantReport.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RestaurantReportFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RestaurantReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RestaurantReport that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantReportFindFirstArgs} args - Arguments to find a RestaurantReport
   * @example
   * // Get one RestaurantReport
   * const restaurantReport = await prisma.restaurantReport.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RestaurantReportFindFirstArgs>(args?: Prisma.SelectSubset<T, RestaurantReportFindFirstArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RestaurantReport that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantReportFindFirstOrThrowArgs} args - Arguments to find a RestaurantReport
   * @example
   * // Get one RestaurantReport
   * const restaurantReport = await prisma.restaurantReport.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RestaurantReportFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RestaurantReportFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RestaurantReports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantReportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RestaurantReports
   * const restaurantReports = await prisma.restaurantReport.findMany()
   * 
   * // Get first 10 RestaurantReports
   * const restaurantReports = await prisma.restaurantReport.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const restaurantReportWithIdOnly = await prisma.restaurantReport.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RestaurantReportFindManyArgs>(args?: Prisma.SelectSubset<T, RestaurantReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RestaurantReport.
   * @param {RestaurantReportCreateArgs} args - Arguments to create a RestaurantReport.
   * @example
   * // Create one RestaurantReport
   * const RestaurantReport = await prisma.restaurantReport.create({
   *   data: {
   *     // ... data to create a RestaurantReport
   *   }
   * })
   * 
   */
  create<T extends RestaurantReportCreateArgs>(args: Prisma.SelectSubset<T, RestaurantReportCreateArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RestaurantReports.
   * @param {RestaurantReportCreateManyArgs} args - Arguments to create many RestaurantReports.
   * @example
   * // Create many RestaurantReports
   * const restaurantReport = await prisma.restaurantReport.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RestaurantReportCreateManyArgs>(args?: Prisma.SelectSubset<T, RestaurantReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RestaurantReports and returns the data saved in the database.
   * @param {RestaurantReportCreateManyAndReturnArgs} args - Arguments to create many RestaurantReports.
   * @example
   * // Create many RestaurantReports
   * const restaurantReport = await prisma.restaurantReport.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RestaurantReports and only return the `id`
   * const restaurantReportWithIdOnly = await prisma.restaurantReport.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RestaurantReportCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RestaurantReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RestaurantReport.
   * @param {RestaurantReportDeleteArgs} args - Arguments to delete one RestaurantReport.
   * @example
   * // Delete one RestaurantReport
   * const RestaurantReport = await prisma.restaurantReport.delete({
   *   where: {
   *     // ... filter to delete one RestaurantReport
   *   }
   * })
   * 
   */
  delete<T extends RestaurantReportDeleteArgs>(args: Prisma.SelectSubset<T, RestaurantReportDeleteArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RestaurantReport.
   * @param {RestaurantReportUpdateArgs} args - Arguments to update one RestaurantReport.
   * @example
   * // Update one RestaurantReport
   * const restaurantReport = await prisma.restaurantReport.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RestaurantReportUpdateArgs>(args: Prisma.SelectSubset<T, RestaurantReportUpdateArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RestaurantReports.
   * @param {RestaurantReportDeleteManyArgs} args - Arguments to filter RestaurantReports to delete.
   * @example
   * // Delete a few RestaurantReports
   * const { count } = await prisma.restaurantReport.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RestaurantReportDeleteManyArgs>(args?: Prisma.SelectSubset<T, RestaurantReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RestaurantReports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantReportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RestaurantReports
   * const restaurantReport = await prisma.restaurantReport.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RestaurantReportUpdateManyArgs>(args: Prisma.SelectSubset<T, RestaurantReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RestaurantReports and returns the data updated in the database.
   * @param {RestaurantReportUpdateManyAndReturnArgs} args - Arguments to update many RestaurantReports.
   * @example
   * // Update many RestaurantReports
   * const restaurantReport = await prisma.restaurantReport.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RestaurantReports and only return the `id`
   * const restaurantReportWithIdOnly = await prisma.restaurantReport.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RestaurantReportUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RestaurantReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RestaurantReport.
   * @param {RestaurantReportUpsertArgs} args - Arguments to update or create a RestaurantReport.
   * @example
   * // Update or create a RestaurantReport
   * const restaurantReport = await prisma.restaurantReport.upsert({
   *   create: {
   *     // ... data to create a RestaurantReport
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RestaurantReport we want to update
   *   }
   * })
   */
  upsert<T extends RestaurantReportUpsertArgs>(args: Prisma.SelectSubset<T, RestaurantReportUpsertArgs<ExtArgs>>): Prisma.Prisma__RestaurantReportClient<runtime.Types.Result.GetResult<Prisma.$RestaurantReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RestaurantReports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantReportCountArgs} args - Arguments to filter RestaurantReports to count.
   * @example
   * // Count the number of RestaurantReports
   * const count = await prisma.restaurantReport.count({
   *   where: {
   *     // ... the filter for the RestaurantReports we want to count
   *   }
   * })
  **/
  count<T extends RestaurantReportCountArgs>(
    args?: Prisma.Subset<T, RestaurantReportCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RestaurantReportCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RestaurantReport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RestaurantReportAggregateArgs>(args: Prisma.Subset<T, RestaurantReportAggregateArgs>): Prisma.PrismaPromise<GetRestaurantReportAggregateType<T>>

  /**
   * Group by RestaurantReport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RestaurantReportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RestaurantReportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RestaurantReportGroupByArgs['orderBy'] }
      : { orderBy?: RestaurantReportGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RestaurantReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RestaurantReport model
 */
readonly fields: RestaurantReportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RestaurantReport.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RestaurantReportClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  restaurant<T extends Prisma.RestaurantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RestaurantDefaultArgs<ExtArgs>>): Prisma.Prisma__RestaurantClient<runtime.Types.Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RestaurantReport model
 */
export interface RestaurantReportFieldRefs {
  readonly id: Prisma.FieldRef<"RestaurantReport", 'String'>
  readonly lastUpdated: Prisma.FieldRef<"RestaurantReport", 'DateTime'>
  readonly restaurantId: Prisma.FieldRef<"RestaurantReport", 'String'>
  readonly tasteScore: Prisma.FieldRef<"RestaurantReport", 'Float'>
  readonly priceScore: Prisma.FieldRef<"RestaurantReport", 'Float'>
  readonly atmosphereScore: Prisma.FieldRef<"RestaurantReport", 'Float'>
  readonly serviceScore: Prisma.FieldRef<"RestaurantReport", 'Float'>
  readonly quantityScore: Prisma.FieldRef<"RestaurantReport", 'Float'>
  readonly accessibilityScore: Prisma.FieldRef<"RestaurantReport", 'Float'>
  readonly aiSummary: Prisma.FieldRef<"RestaurantReport", 'String'>
}
    

// Custom InputTypes
/**
 * RestaurantReport findUnique
 */
export type RestaurantReportFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * Filter, which RestaurantReport to fetch.
   */
  where: Prisma.RestaurantReportWhereUniqueInput
}

/**
 * RestaurantReport findUniqueOrThrow
 */
export type RestaurantReportFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * Filter, which RestaurantReport to fetch.
   */
  where: Prisma.RestaurantReportWhereUniqueInput
}

/**
 * RestaurantReport findFirst
 */
export type RestaurantReportFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * Filter, which RestaurantReport to fetch.
   */
  where?: Prisma.RestaurantReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RestaurantReports to fetch.
   */
  orderBy?: Prisma.RestaurantReportOrderByWithRelationInput | Prisma.RestaurantReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RestaurantReports.
   */
  cursor?: Prisma.RestaurantReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RestaurantReports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RestaurantReports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RestaurantReports.
   */
  distinct?: Prisma.RestaurantReportScalarFieldEnum | Prisma.RestaurantReportScalarFieldEnum[]
}

/**
 * RestaurantReport findFirstOrThrow
 */
export type RestaurantReportFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * Filter, which RestaurantReport to fetch.
   */
  where?: Prisma.RestaurantReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RestaurantReports to fetch.
   */
  orderBy?: Prisma.RestaurantReportOrderByWithRelationInput | Prisma.RestaurantReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RestaurantReports.
   */
  cursor?: Prisma.RestaurantReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RestaurantReports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RestaurantReports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RestaurantReports.
   */
  distinct?: Prisma.RestaurantReportScalarFieldEnum | Prisma.RestaurantReportScalarFieldEnum[]
}

/**
 * RestaurantReport findMany
 */
export type RestaurantReportFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * Filter, which RestaurantReports to fetch.
   */
  where?: Prisma.RestaurantReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RestaurantReports to fetch.
   */
  orderBy?: Prisma.RestaurantReportOrderByWithRelationInput | Prisma.RestaurantReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RestaurantReports.
   */
  cursor?: Prisma.RestaurantReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RestaurantReports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RestaurantReports.
   */
  skip?: number
  distinct?: Prisma.RestaurantReportScalarFieldEnum | Prisma.RestaurantReportScalarFieldEnum[]
}

/**
 * RestaurantReport create
 */
export type RestaurantReportCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * The data needed to create a RestaurantReport.
   */
  data: Prisma.XOR<Prisma.RestaurantReportCreateInput, Prisma.RestaurantReportUncheckedCreateInput>
}

/**
 * RestaurantReport createMany
 */
export type RestaurantReportCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RestaurantReports.
   */
  data: Prisma.RestaurantReportCreateManyInput | Prisma.RestaurantReportCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RestaurantReport createManyAndReturn
 */
export type RestaurantReportCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * The data used to create many RestaurantReports.
   */
  data: Prisma.RestaurantReportCreateManyInput | Prisma.RestaurantReportCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * RestaurantReport update
 */
export type RestaurantReportUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * The data needed to update a RestaurantReport.
   */
  data: Prisma.XOR<Prisma.RestaurantReportUpdateInput, Prisma.RestaurantReportUncheckedUpdateInput>
  /**
   * Choose, which RestaurantReport to update.
   */
  where: Prisma.RestaurantReportWhereUniqueInput
}

/**
 * RestaurantReport updateMany
 */
export type RestaurantReportUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RestaurantReports.
   */
  data: Prisma.XOR<Prisma.RestaurantReportUpdateManyMutationInput, Prisma.RestaurantReportUncheckedUpdateManyInput>
  /**
   * Filter which RestaurantReports to update
   */
  where?: Prisma.RestaurantReportWhereInput
  /**
   * Limit how many RestaurantReports to update.
   */
  limit?: number
}

/**
 * RestaurantReport updateManyAndReturn
 */
export type RestaurantReportUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * The data used to update RestaurantReports.
   */
  data: Prisma.XOR<Prisma.RestaurantReportUpdateManyMutationInput, Prisma.RestaurantReportUncheckedUpdateManyInput>
  /**
   * Filter which RestaurantReports to update
   */
  where?: Prisma.RestaurantReportWhereInput
  /**
   * Limit how many RestaurantReports to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * RestaurantReport upsert
 */
export type RestaurantReportUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * The filter to search for the RestaurantReport to update in case it exists.
   */
  where: Prisma.RestaurantReportWhereUniqueInput
  /**
   * In case the RestaurantReport found by the `where` argument doesn't exist, create a new RestaurantReport with this data.
   */
  create: Prisma.XOR<Prisma.RestaurantReportCreateInput, Prisma.RestaurantReportUncheckedCreateInput>
  /**
   * In case the RestaurantReport was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RestaurantReportUpdateInput, Prisma.RestaurantReportUncheckedUpdateInput>
}

/**
 * RestaurantReport delete
 */
export type RestaurantReportDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
  /**
   * Filter which RestaurantReport to delete.
   */
  where: Prisma.RestaurantReportWhereUniqueInput
}

/**
 * RestaurantReport deleteMany
 */
export type RestaurantReportDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RestaurantReports to delete
   */
  where?: Prisma.RestaurantReportWhereInput
  /**
   * Limit how many RestaurantReports to delete.
   */
  limit?: number
}

/**
 * RestaurantReport without action
 */
export type RestaurantReportDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RestaurantReport
   */
  select?: Prisma.RestaurantReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RestaurantReport
   */
  omit?: Prisma.RestaurantReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RestaurantReportInclude<ExtArgs> | null
}
